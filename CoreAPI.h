/*
This code was created by CoreAPITeam.
Please do not use without copyright notice.
For more information,Plugins,Updates and Tutorials visit http://www.coreengine.de.vu/ (German Homepage)
Thanks and have fun.

Want to stay in contact? 
Steam : omg_fail
E-Mail: coresupportteam@live.de
*/
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
#pragma once
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
#include <iostream>
#include <string>
#include <fstream>
#include <Windows.h>
#include <vector>
#pragma comment(lib,"winmm.lib")
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
namespace math
{
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	class Math 
	{
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	public :
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ add(Typ a, Typ b)
		{
			return a+b;
		}		
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ sub(Typ a, Typ b)
		{
			return a-b;
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ div(Typ a, Typ b)
		{
			return a/b;
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ mul(Typ a, Typ b)
		{
			return a*b;
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ square(Typ a)
		{
			return a*a;
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ fraction(Typ _1a,Typ _2a)
		{
			return (_1a/_1b);
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ fractionadd(Typ _1a,Typ _2a,Typ _1b,Typ _2b)
		{
			return (_1a/_2a)+(_1b/_2b);
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ fractionsub(Typ _1a,Typ _2a,Typ _1b,Typ _2b)
		{
			return (_1a/_2a)-(_1b/_2b);
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ fractionmul(Typ _1a,Typ _2a,Typ _1b,Typ _2b)
		{
			return (_1a/_2a)*(_1b/_2b);
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		template <class Typ>
		static Typ fractiondiv(Typ _1a,Typ _2a,Typ _1b,Typ _2b)
		{
			return (_1a/_2a)/(_1b/_2b);
		}	
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
// How to use : math::Math::add<A TYPE YOU WANT >(VAR 1, VAR 2)
	};//class Math ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
}//namespace math ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
namespace core {
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	enum TEXT_ALIGN {
		ALIGN_LEFT,
		ALIGN_CENTER,
		ALIGN_RIGHT,
		caption
	};
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	namespace key {
		enum MOUSE_BUTTON {
			KEY_M_RIGHT,
			KEY_M_LEFT,
			KEY_M_MIDDLE
		};
	}
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	struct MenuItem {
		const char *Caption;
		TEXT_ALIGN text_align;
		byte color;
	};
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	namespace color {
		 static byte COLOR_BLACK			=0x0;
		 static byte COLOR_DARKBLUE			=0x1;
		 static byte COLOR_DARKGREEN		=0x2;
		 static byte COLOR_DARKTURK			=0x3;
		 static byte COLOR_DARKRED			=0x4;
		 static byte COLOR_LILA				=0x5;
		 static byte COLOR_BROWN			=0x6;
		 static byte COLOR_GREY				=0x7;
		 static byte COLOR_DARKGREY			=0x8;
		 static byte COLOR_BLUE				=0x9;
		 static byte COLOR_GREEN			=0xA;
		 static byte COLOR_TURK				=0xB;
		 static byte COLOR_RED				=0xC;
		 static byte COLOR_PINK				=0xD;
		 static byte COLOR_YELLOW			=0xE;
		 static byte COLOR_WHITE			=0xF;
	}
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	namespace specialChar {
		const unsigned char AE = static_cast<unsigned char>(142);
		const unsigned char ae = static_cast<unsigned char>(132);
		const unsigned char OE = static_cast<unsigned char>(153);
		const unsigned char oe = static_cast<unsigned char>(148);
		const unsigned char UE = static_cast<unsigned char>(154);
		const unsigned char ue = static_cast<unsigned char>(129);
		const unsigned char ss = static_cast<unsigned char>(225);
	}
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	namespace ascII {
		const unsigned char flash = static_cast<unsigned char>(159);
		const unsigned char rights = static_cast<unsigned char>(196);
		const unsigned char half = static_cast<unsigned char>(171);
	}
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	class CoreAPI {
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	private :
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		TEXT_ALIGN text_align;
		HANDLE hConsole;
		byte FontColor;
		byte BGColor;
		HANDLE hStdInput,hStdOutput,hEvent;                         
		INPUT_RECORD ir[128];                                      
		DWORD nRead;                                               
		COORD xy;
		UINT i;
		COORD CursorPos;
		short ScreenPosX;
		short ScreenPosY;
		short ScreenW;
		short ScreenH;
		const char* cConsolecaption;
		bool bShowCursor;
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	public :
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		CoreAPI();
		CoreAPI(short ScreenPosX, short ScreenPosY,short ScreenW,short ScreenH,const char* cConsolecaption,bool bShowCursor);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void SaveCursorPos(void);
		void GotoCursorPos(COORD coord);
		SMALL_RECT GetRect();
		void setCursorPos(short Cursorx,short Cursory);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void clear();
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void StringTextElement(std::string Text, bool visible);
		void Write(char *Text);
		void WriteLn(char *Text);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void SetFontColor(byte Color);
		void SetBGColor(byte Color);
		void Fill(byte Color,bool OnlyVisible);
		void ColorUpdate();
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void DrawWin(int wx, int wy, int ww, int wh,byte wBorderColor,int wnItems,MenuItem* Items);
		void DrawCenterWin(int wy, int ww, int wh,byte wBorderColor,int wnItems,MenuItem *Items);
		void DrawLine(char CHAR,byte color,int len);
		void DrawCenterBox(int y, int w, int h,byte BorderColor,int nItems,MenuItem *Items);
		void DrawBox(int x, int y, int w, int h,byte BorderColor,int nItems,MenuItem* Items);
		void DrawCustomWindow(const char* Char, int cx, int cy, int cw, int ch,byte cBorderColor,int cnItems,MenuItem* Items);
		void DrawCustomCenterWindow(const char* Char,int cy, int cw, int ch,byte cBorderColor,int cnItems,MenuItem *Items);
		void Draw_unexpected_error_msg();
		void Draw_costum_error_msg(const char* errortext);
		void Draw_costum_warning_msg(const char* warningtext);
		void Draw_costum_info_msg(const char* infotext);
		void DrawBoxVec(int x, int y, int w, int h,byte BorderColor,int size__,std::vector<core::MenuItem> Items);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################		
		void CreateMouseButtonArea(int y_begin , int y_end, int x_begin, int x_end, core::key::MOUSE_BUTTON mb, void (*action)());
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void show_cursor(bool bShowCursor);
		void setScreenSize(int ScreenWidth,int ScreenHeigth,int ScreenCordx,int ScreenCordy);
		void setConsolecaption(const char* Consolecaption);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void Window();
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void Loader(int segements,int time,int Size);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
		void CircleLoader(short posX,short posY,byte highlightedcolor,byte backgroundcolor,int timepersegement);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	};//class CoreAPI ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
}//namespace core ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
namespace sound
{
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	class Sound
	{
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	public :
		static BOOL play(LPCWSTR soundfile);
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
	};//class Sound ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
}//namespace sound ends
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################
//######################################################################################################################################